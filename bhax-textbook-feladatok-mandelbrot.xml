<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>A Mandelbrot halmaz</title>
        <para>
            Mandelbrot halmaz egy halmaz a komplex számsíkon. Nevét Benoit Mandelrol kapta, aki megfogalmazta a fraktálok fogalmát (A fraktálok komplex alakzatok).
        </para>
        <para>
            Forrás:<link xlink:href="https://sourceforge.net/p/udprog/code/ci/master/tree/source/kezdo/elsocpp/mandelbrot/mandelbrot.cpp">https://sourceforge.net/p/udprog/code/ci/master/tree/source/kezdo/elsocpp/mandelbrot/mandelbrot.cpp</link>
        </para>
        <para>
            Kód:               
        </para>
      <programlisting language="c"><![CDATA[   
#include <stdio.h>
#include <stdlib.h>
#include <png.h>
#include <sys/times.h>
#include <libpng16/png.h>

#define SIZE 600
#define ITERATION_LIMIT 32000

void mandel (int buffer[SIZE][SIZE]) {

    clock_t delta = clock ();
    struct tms tmsbuf1, tmsbuf2;
    times (&tmsbuf1);

    float a = -2.0, b = .7, c = -1.35, d = 1.35;
    int width = SIZE, height = SIZE, iterationLimit = ITERATION_LIMIT;

    float dx = (b - a) / width;
    float dy = (d - c) / height;
    float reC, imC, reZ, imZ, newReZ, newImZ;

    int iteration = 0;
    
    for (int j = 0; j < height; ++j)
    {
        for (int k = 0; k < width; ++k)
        {
            
            reC = a + k * dx;
            imC = d - j * dy;
            
            reZ = 0;
            imZ = 0;
            iteration = 0;
            
            while (reZ * reZ + imZ * imZ < 4 && iteration < iterationLimit)
            {
                newReZ = reZ * reZ - imZ * imZ + reC;
                newImZ = 2 * reZ * imZ + imC;
                reZ = newReZ;
                imZ = newImZ;

                ++iteration;

            }

            buffer[j][k] = iteration;
        }
    }

    times (&tmsbuf2);
    printf("%ld\n",tmsbuf2.tms_utime - tmsbuf1.tms_utime
              + tmsbuf2.tms_stime - tmsbuf1.tms_stime);

    delta = clock () - delta;
    printf("%f sec\n",(float) delta / CLOCKS_PER_SEC);

}

int main (int argc, char *argv[])
{

    if (argc != 2)
    {
        printf("Hasznalat: ./mandelpng fajlnev\n");
        return -1;
    }
    FILE *fp = fopen(argv[1], "wb");
        if(!fp) return -1;
    
    png_structp png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING,NULL,NULL,NULL);
    
    if(!png_ptr)
        return -1;
    png_infop info_ptr = png_create_info_struct(png_ptr);
    if(!info_ptr)
    {
        png_destroy_write_struct(&png_ptr,(png_infopp)NULL);
        return -1;
    }
   if (setjmp(png_jmpbuf(png_ptr)))
    {
        png_destroy_write_struct(&png_ptr, &info_ptr);
        fclose(fp);
        return -1;
    }
    png_init_io(png_ptr, fp);

   
    png_set_IHDR(png_ptr, info_ptr, SIZE, SIZE,
            8, PNG_COLOR_TYPE_RGB, PNG_INTERLACE_NONE,
            PNG_COMPRESSION_TYPE_BASE, PNG_FILTER_TYPE_BASE);

  
    
    png_text title_text;
    title_text.compression = PNG_TEXT_COMPRESSION_NONE;
    title_text.key = "Title";
    title_text.text = "Mandelbrot halmaz";
    png_set_text(png_ptr, info_ptr, &title_text, 1);
    

    png_write_info(png_ptr, info_ptr);
   
    png_bytep row = (png_bytep) malloc(3 * SIZE * sizeof(png_byte));
    
    
    int buffer[SIZE][SIZE];

    mandel(buffer);

    for (int j = 0; j < SIZE; ++j)
    {
        for (int k = 0; k < SIZE; ++k)
        {
            row[k*3] = (255 - (255 * buffer[j][k]) / ITERATION_LIMIT);
            row[k*3+1] = (255 - (255 * buffer[j][k]) / ITERATION_LIMIT);
            row[k*3+2] = (255 - (255 * buffer[j][k]) / ITERATION_LIMIT);
            row[k*3+3] = (255 - (255 * buffer[j][k]) / ITERATION_LIMIT);
        }
        png_write_row(png_ptr, row);
    }
    png_write_end(png_ptr, NULL);

    printf("%s mentve\n",argv[1]);

}
      	]]></programlisting>
	<para>
      	A png.h headerre van szükségégünk ahoz hogy png-t tudjunk kezelni. Ez alapból nincs meg a gépen, ezért először is le kell töltenünk az internetről egy fájlt ami tartalmazza a headert. Miután ezt letöltöttük, még telepíteni kell a libpng könyvtárat az alábbi módon:  "sudo apt-get install libpng++-dev".	
      	</para>	      	
	<para>Az include-ról kicsit lejebb, bővebben kifejtve beszélek majd. A kódot állandók definiálásával kezdjük, ilyen lesz a kép maximum szélessége, magassága. Az első függvény fogja nekünk legenerálni a képet. A "png" csomagot használjuk ehez. Létrehozunk egy üres pngt ami 500x500 pixel ((500X500 as mátrix)). A forcikluson belül rgb színkóddal határozzuk meg a színes pixeleket.  és a "image.write" a képet kiküldjük a kimenetrre egy adott névvel. ez a függvény a fő függvény legalján lesz meghívví. A következő egy struktúra amiben 2 double tipusú változót deklarálunk , ez a komplex számoknak a struktúrája. Ezután a fő függvényben létrehozunk egy tömböt ami 500x500 elemű. Ezekhez az állandókat használjuk. 3 egész tipusú deklarálása után 2 double változót deklarálunk a "dx" és "dy" amivel a pixeleket fogunk meghatározni. A következő sorban lefoglaljuk a helyet c, z, zuj változoknak, utánna elvégezzük a számításokat és beletesszük azokat a tömbe és meghívjuk a függvényt amivel legeneráljuk.
      	</para>	
      	<programlisting language="c"><![CDATA[
    for (int j = 0; j < height; ++j)
    {
        for (int k = 0; k < width; ++k)
        {
            
            reC = a + k * dx;
            imC = d - j * dy;
            
            reZ = 0;
            imZ = 0;
            iteration = 0;
            
            while (reZ * reZ + imZ * imZ < 4 && iteration < iterationLimit)
            {
                newReZ = reZ * reZ - imZ * imZ + reC;
                newImZ = 2 * reZ * imZ + imC;
                reZ = newReZ;
                imZ = newImZ;

                ++iteration;

            }

            buffer[j][k] = iteration;
        }
    }
	]]></programlisting>
	<para>A fenti részlet számolja ki a komplex számot. Erre azért van szükség, mert nem használjuk a komplex osztályt. A lenti képen találhatjuk meg a kimeneti fájlt, amit úgy kapunk meg, ha program megírása után így kompiláljuk: gcc -o mandelhalmaz mandelhalmaz.c -lpng.
A futatáshoz pedig ./mandelhalmaz mandelh2.png parancsot használjuk, ahol a második rész a kimeneti fájl neve.
      	</para>	
      	<mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="img/mandel.png" format="PNG" scale="30"/>
        	</imageobject>
        </mediaobject>
    </section>        
        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
	<para>
          Itt a feladat ugyan az mint az előző pontban. A különbség, hogy itt most használjuk a complex headert. Ahogy említve volt az elöző feladatban is, a komplex osztály segítségével egy teljes strúkturát sporolhatunk meg.
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf</link>
        </para>
        <programlisting language="c"><![CDATA[
#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

  int szelesseg = 1920;
  int magassag = 1080;
  int iteraciosHatar = 255;
  double a = -1.9;
  double b = 0.7;
  double c = -1.3;
  double d = 1.3;

  if ( argc == 9 )
    {
      szelesseg = atoi ( argv[2] );
      magassag =  atoi ( argv[3] );
      iteraciosHatar =  atoi ( argv[4] );
      a = atof ( argv[5] );
      b = atof ( argv[6] );
      c = atof ( argv[7] );
      d = atof ( argv[8] );
    }
  else
    {
      std::cout << "Hasznalat: ./complex fajlnev szelesseg magassag n a b c d" << std::endl;
      return -1;
    }

  png::image < png::rgb_pixel > kep ( szelesseg, magassag );

  double dx = ( b - a ) / szelesseg;
  double dy = ( d - c ) / magassag;
  double reC, imC, reZ, imZ;
  int iteracio = 0;

  std::cout << "Szamitas\n";

  for ( int j = 0; j < magassag; ++j )
    {

      for ( int k = 0; k < szelesseg; ++k )
        {
          reC = a + k * dx;
          imC = d - j * dy;
          std::complex<double> c ( reC, imC );

          std::complex<double> z_n ( 0, 0 );
          iteracio = 0;

          while ( std::abs ( z_n ) < 4 && iteracio < iteraciosHatar )
            {
              z_n = z_n * z_n + c;

              ++iteracio;
            }

          kep.set_pixel ( k, j,
                          png::rgb_pixel ( iteracio%255, (iteracio*iteracio)%255, 0 ) );
        }

      int szazalek = ( double ) j / ( double ) magassag * 100.0;
      std::cout << "\r" << szazalek << "%" << std::flush;
    }

  kep.write ( argv[1] );
  std::cout << "\r" << argv[1] << " mentve." << std::endl;

}
	]]></programlisting>
	<para>
            A fő függvényben dekralálunk 2 változót, ha argumentumként jól adjuk meg ezeket, akkor ezeket átadja a változóknak, ha nem jól adjuk meg, akkor kiírjuk, hogy kell helyesen használni.
            Ezek után megadjuk a szélességet és a magasságot,ami ebbe az esetbe FullHD és az iterácoós határt. Továbbá létrehozunk változókat, amik a kép elkészítéséhez kellenek majd. Az if fügvény vizsgálja meg, az argumentum érvényességét, illetve itt adja át az előbb említett értékeket. Az else ág a rossz esetén, a segítséget írja ki. Ezek után lefoglaljuk a helyet a képnek. A dx, dy-hez hozzá rendeljük a megfelelő változókat. A forciklusban végig megyünk minden elemen és megadjuk a c változó értékét. Ekkor használjuk a complex-et, while ciklusban végezzük a számításokat, utánna rgb kóddal a pixeleket kiszinezzük.
        </para>
        <para>
            A futtatáshoz szükségünk lesz a -lpng kapcsolóra.                 
        </para>
	<programlisting language="c"><![CDATA[
	if ( argc == 9 )
    {
      szelesseg = atoi ( argv[2] );
      magassag =  atoi ( argv[3] );
      iteraciosHatar =  atoi ( argv[4] );
      a = atof ( argv[5] );
      b = atof ( argv[6] );
      c = atof ( argv[7] );
      d = atof ( argv[8] );
    }
  else
    {
      std::cout << "Hasznalat: ./complex fajlnev szelesseg magassag n a b c d" << std::endl;
      return -1;
    }
	]]></programlisting>
	<para>
            A fenti kód kommentárba helyezésével, elérhetjük, hogy a program ne kommunikáljon a felhasználóval, azaz az értékeket csak a forráskódban lehet változtatni és az előre meghatározott számokkal fog dolgozni. Ezzel egyszerűsíthető a program a kezdő felhasználók számára. A következő két képen láthatjuk majd a program végeredményét az alapértelmezett beépített értékekkel, illetve egy képet, ami felhasználó által megadott értékkel lett elkészítve.                
        </para>
	<mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="img/complex2.png" format="PNG" scale="15"/>
        	</imageobject>
        </mediaobject>
	<mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="img/complex.png" format="PNG" scale="15"/>
        	</imageobject>
        </mediaobject>
    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
        	A biomorf program a mandelbrot programkódját vesszi alapul. A mandelbrot halmaz tarttarlmazza az összes ilyen halmazt. A program ugyanúgy bekéri a megfelelő bemeneteket, ha nem jó akkor kiírja. Ha jó, akkor a megfelelő változók megkapják a megfelelő értékeket. Ezután történik a kép létrehozása. Ugyan úgy megkapja a dx és dy az értéket. Aztán pedig a komplex számokat gozzuk létre. Megint végig megy a program minden ponton és ahol kell használjuk az rgb kódos színezést. A legvégén pedig kiküldjük a képet a kimenetre.
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf</link>
        </para>
        <para>
            Kód:
        </para> 
        <programlisting language="c"><![CDATA[
 #include <iostream>
#include "png++/png.hpp"
#include <complex>
int
main ( int argc, char *argv[] )
{
    int szelesseg = 1920;
    int magassag = 1080;
    int iteraciosHatar = 255;
    double xmin = -1.9;
    double xmax = 0.7;
    double ymin = -1.3;
    double ymax = 1.3;
    double reC = .285, imC = 0;
    double R = 10.0;
    if ( argc == 12 )
    {
        szelesseg = atoi ( argv[2] );
        magassag =  atoi ( argv[3] );
        iteraciosHatar =  atoi ( argv[4] );
        xmin = atof ( argv[5] );
        xmax = atof ( argv[6] );
        ymin = atof ( argv[7] );
        ymax = atof ( argv[8] );
        reC = atof ( argv[9] );
        imC = atof ( argv[10] );
        R = atof ( argv[11] );
    }
    else
    {
        std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d reC imC R" << std::endl;
        return -1;
    }
    png::image < png::rgb_pixel > kep ( szelesseg, magassag );
    double dx = ( xmax - xmin ) / szelesseg;
    double dy = ( ymax - ymin ) / magassag;
    std::complex<double> cc ( reC, imC );
    std::cout << "Szamitas\n";
    for ( int y = 0; y < magassag; ++y )
    {
       
        for ( int x = 0; x < szelesseg; ++x )
        {
            double reZ = xmin + x * dx;
            double imZ = ymax - y * dy;
            std::complex<double> z_n ( reZ, imZ );
            int iteracio = 0;
            for (int i=0; i < iteraciosHatar; ++i)
            {
                z_n = std::pow(z_n, 3) + cc;
                if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
                {
                    iteracio = i;
                    break;
                }
            }
            kep.set_pixel ( x, y,
                            png::rgb_pixel ( (iteracio*20)%255, (iteracio*40)%255, (iteracio*60)%255 ));
        }
        int szazalek = ( double ) y / ( double ) magassag * 100.0;
        std::cout << "\r" << szazalek << "%" << std::flush;
    }
    kep.write ( argv[1] );
    std::cout << "\r" << argv[1] << " mentve." << std::endl;
}
       	
        ]]></programlisting>     
         <mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="img/bmorf.png" format="PNG" scale="30"/>
        	</imageobject>
        </mediaobject>                  
    </section>                                            

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
        <para>
          Továbbra is a mandelbrot halmazzal foglalkozunk, de mi is az a cuda? A CUDA az Nvidia videókártyáknak egy párhuzamos számításokat segítő technólógia. Használható C és C++ nyelveknél is. Ezen technika segítségével fogjuk felgyórsítani a kép létrehozását. Ehez szükségünk lesz egy Nvidida videókártyára ami rendelkezik CUDA-val. Továbbá telepítenünk kell. A kód kiterjesztése ".cu"
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://progpater.blog.hu/2011/03/27/a_parhuzamossag_gyonyorkodtet">https://progpater.blog.hu/2011/03/27/a_parhuzamossag_gyonyorkodtet</link>
        </para>
        <para>
          Kód:
        </para>
        <programlisting language="c"><![CDATA[
#include <png++/image.hpp>
#include <png++/rgb_pixel.hpp>
#include <sys/times.h>
#include <iostream>
#define MERET 600
#define ITER_HAT 32000
__device__ int
mandel (int k, int j)
{
float a = -2.0, b = .7, c = -1.35, d = 1.35;
int szelesseg = MERET, magassag = MERET, iteraciosHatar = ITER_HAT;
float dx = (b - a) / szelesseg;
float dy = (d - c) / magassag;
float reC, imC, reZ, imZ, ujreZ, ujimZ;
int iteracio = 0;
reC = a + k * dx;
imC = d - j * dy;
reZ = 0.0;
imZ = 0.0;
iteracio = 0;
while (reZ * reZ + imZ * imZ < 4 && iteracio < iteraciosHatar)
    {
    // z_{n+1} = z_n * z_n + c
    ujreZ = reZ * reZ - imZ * imZ + reC;
    ujimZ = 2 * reZ * imZ + imC;
    reZ = ujreZ;
    imZ = ujimZ;
    ++iteracio;
    }
return iteracio;
}
/*
__global__ void
mandelkernel (int *kepadat)
{
int j = blockIdx.x;
int k = blockIdx.y;
kepadat[j + k * MERET] = mandel (j, k);
}
*/
__global__ void
mandelkernel (int *kepadat)
{
int tj = threadIdx.x;
int tk = threadIdx.y;
int j = blockIdx.x * 10 + tj;
int k = blockIdx.y * 10 + tk;
kepadat[j + k * MERET] = mandel (j, k);
}
void
cudamandel (int kepadat[MERET][MERET])
{
int *device_kepadat;
cudaMalloc ((void **) &device_kepadat, MERET * MERET * sizeof (int));
dim3 grid (MERET / 10, MERET / 10);
dim3 tgrid (10, 10);
mandelkernel <<< grid, tgrid >>> (device_kepadat);  
cudaMemcpy (kepadat, device_kepadat,
        MERET * MERET * sizeof (int), cudaMemcpyDeviceToHost);
cudaFree (device_kepadat);
}
int
main (int argc, char *argv[])
{
clock_t delta = clock ();
struct tms tmsbuf1, tmsbuf2;
times (&tmsbuf1);
if (argc != 2)
    {
    std::cout << "Hasznalat: ./mandelpngc fajlnev";
    return -1;
    }
int kepadat[MERET][MERET];
cudamandel (kepadat);
png::image < png::rgb_pixel > kep (MERET, MERET);
for (int j = 0; j < MERET; ++j)
    {
    for (int k = 0; k < MERET; ++k)
    {
    kep.set_pixel (k, j,
            png::rgb_pixel (255 -
                    (255 * kepadat[j][k]) / ITER_HAT,
                    255 -
                    (255 * kepadat[j][k]) / ITER_HAT,
                    255 -
                    (255 * kepadat[j][k]) / ITER_HAT));
    }
    }
kep.write (argv[1]);
std::cout << argv[1] << " mentve" << std::endl;
times (&tmsbuf2);
std::cout << tmsbuf2.tms_utime - tmsbuf1.tms_utime
    + tmsbuf2.tms_stime - tmsbuf1.tms_stime << std::endl;
delta = clock () - delta;
std::cout << (float) delta / CLOCKS_PER_SEC << " sec" << std::endl;
}
]]></programlisting>
        <para>
          Nézzük a kódot. Az fejlécek alatt két állandót definiálunk, a kép méretét és az iterációs határt. A következő lépés a Mandelbrot halmaz létrehozása. Ezt egy függvénnyel hozzuk létre. A függvény előtt jelezzük, hogy a számításokat Cudával végezzük majd a fordításnál. A függvényen belül deklarálunk float tipusú változókat a számításokhoz. A matematikai számítás ugyan az mint az 5.1 feladatban, szóval ezt nem fejtem ki most. A következő függvény előtt nem "__device__" jelzés van hanem "__global__" . Ezzel szintén azt jelezzük, hogy a Cuda fogja végezni a számítást. A "threadIdx" jelzi az aktuális szálat és a "blockIdx", hogy melyik blokban folyik a számítás. A kép értékeit a j és a k változókban tároljuk el. Ezt a két értéket fogja kapni az előző függvény. A következő függvény a cudamandel(). Ez egy Méret x Méret azaz 600x600-as tömböt kap. Deklarálunk egy mutatót és a Malloc segítségével lefoglaljuk a megfelelő tárhelyet és a mutató ide fog mutatni. Itt hozzuk létre a megfelelő blokkokat. A végén a tárhelyet felszabadítjuk. A fő függvényünkben sem történik nagy változás. Egyből egy idő méréssel kezdünk. Lemérjük mennyi időbe telik a gépnek, hogy megalkossa a képet. Utánna deklaráljuk a tömböt, meghívjuk a cudamandel() függvényt és már az ismert módon létrehozzuk a képet.
        </para>
        <para>
          A kódot az "nvcc" fordítóval fordítjuk, le kell tölteni, ehez a gép ad segítséget. A következőképpen fordítjuk: "nvcc mandelpngc_60x60_100.cu -lpng16 -O3 -o mandelpngc
          ". Miután fordítottuk utánna futtatjuk. Ha egymás mellé tesszük a Cudas és a nem kudás képalkotást, láthatjuk, hogy a kép elkészítési ideje a cudásnál sokkal gyorsabb.
        </para>
    </section>                     
             
    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat!
        </para>
            
        <para>
            A program azt fogja csinálni, hogy létrejön nekünk egy mandelbrot halmaz és az egérrel képesek vagyunk belenagyítani akár a végtelenségig a halmazba.
        </para>
            
        <para>
            Kód:  
        </para>
<programlisting language="c"><![CDATA[
#include<QApplication>
#include "frakablak.h"
int main(int argc, char *argv[])
{
	QApplication a(argc, argv);
	Frakablak w1,
	w2(-.08292191725019529, -.082921917244591272,
	   -.9662079988595939, -.9662079988551172, 1200, 3000),
	w3(-.08292191724880625, -.0829219172470933,
	   -.9662079988581493, -.9662079988563615, 1200, 4000),
	w4(.14388310361318304, .14388310362702217,
	   .6523089200729396, .6523089200854384, 1200, 38655);
	w1.show();
	w2.show();
	w3.show();
	w4.show();
	return a.exec();
}
       	]]></programlisting>
        <para>
           Ez a program nem elég önmagában, több forrásra van szükséunk. ilyen például a frakablak.h header. Egy mappába össze kell szednünk az összes forrást és telepítenünk kell ezt: "sudo apt-get install libqt4-dev". A qmake -project parancsal létrehozunk egy .pro fájlt. ebbe meg kell adnunk a QT+=Widgets parancsot a megfelelő helyre. Ez létrehoz egy fájlokat .o kiterjesztéssel és egy makefilet, ezek után make parancsal létrehozzuk a nagyítót. Ezek után kész is a programunk. A frakszal.cpp-ben készül el az ábránk amit majd nagyítani fogunk. Az rgb pixel színezést azonban már a frakablak végzi. 
        </para> 
        <para>
          Forrás:<link xlink:href="https://progpater.blog.hu/2011/03/26/kepes_egypercesek">https://progpater.blog.hu/2011/03/26/kepes_egypercesek</link>
        </para>
<mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="img/nagynagy.png" format="PNG" scale="30"/>
        	</imageobject>
        </mediaobject> 

<mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="img/nagykicsi.png" format="PNG" scale="30"/>
        	</imageobject>
        </mediaobject> 

    </section>
                                                                                                                                                               
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para>
          Ebben a feladatban az 5.5 feladatot fogjuk megírni Java-ban. A program lényege itt is az, hogy a mandelbrothalmazba belenagyítunk. 
        </para>
        <para>
          A program elején létrehozzuk a Mandelbrot halmazt. Ehez az extends szóval hozzá kapcsoljuk a Mandelbrothalmazt építő java kódunkat. A mousePressed() függvényel megadjuk a programnak az egér által kijelőlt kordinátákat. Ezután A kijelőlt területen újraszámoljuk a halmazt. Majd feldolgozza a létre jött kép szélét és magasságát. A pillanatfelvétel() függvénnyel egy pillanatfelvételt készítünk. A függvényen belül elnevezzük a tartomány szerint és egy png formátumú képet készítünk a pillanatfelvételből. A nagyítás során láthatunk egy segítő négyzetet, ezt a paint() függvényel hozzuk létre. 
        </para>
        <para>
          A kód forrása:<link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apbs02.html">https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apbs02.html</link> 
        </para>
<programlisting language="c"><![CDATA[        
public class MandelbrotHalmazNagyító extends MandelbrotHalmaz {
    private int x, y;
    private int mx, my;
    public MandelbrotHalmazNagyító(double a, double b, double c, double d,
            int szélesség, int iterációsHatár) {
        super(a, b, c, d, szélesség, iterációsHatár);
        setTitle("A Mandelbrot halmaz nagyításai");
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent m) {
                x = m.getX();
                y = m.getY();
                mx = 0;
                my = 0;
                repaint();
            }
            public void mouseReleased(java.awt.event.MouseEvent m) {
                double dx = (MandelbrotHalmazNagyító.this.b
                        - MandelbrotHalmazNagyító.this.a)
                        /MandelbrotHalmazNagyító.this.szélesség;
                double dy = (MandelbrotHalmazNagyító.this.d
                        - MandelbrotHalmazNagyító.this.c)
                        /MandelbrotHalmazNagyító.this.magasság;
                new MandelbrotHalmazNagyító(MandelbrotHalmazNagyító.this.a+x*dx,
                        MandelbrotHalmazNagyító.this.a+x*dx+mx*dx,
                        MandelbrotHalmazNagyító.this.d-y*dy-my*dy,
                        MandelbrotHalmazNagyító.this.d-y*dy,
                        600,
                        MandelbrotHalmazNagyító.this.iterációsHatár);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent m) {
                mx = m.getX() - x;
                my = m.getY() - y;
                repaint();
            }
        });
    }
    public void pillanatfelvétel() {
        java.awt.image.BufferedImage mentKép =
                new java.awt.image.BufferedImage(szélesség, magasság,
                java.awt.image.BufferedImage.TYPE_INT_RGB);
        java.awt.Graphics g = mentKép.getGraphics();
        g.drawImage(kép, 0, 0, this);
        g.setColor(java.awt.Color.BLUE);
        g.drawString("a=" + a, 10, 15);
        g.drawString("b=" + b, 10, 30);
        g.drawString("c=" + c, 10, 45);
        g.drawString("d=" + d, 10, 60);
        g.drawString("n=" + iterációsHatár, 10, 75);
        if(számításFut) {
            g.setColor(java.awt.Color.RED);
            g.drawLine(0, sor, getWidth(), sor);
        }         
        g.setColor(java.awt.Color.GREEN);
        g.drawRect(x, y, mx, my);
        g.dispose();        
        StringBuffer sb = new StringBuffer();
        sb = sb.delete(0, sb.length());
        sb.append("MandelbrotHalmazNagyitas_");
        sb.append(++pillanatfelvételSzámláló);
        sb.append("_");
        sb.append(a);
        sb.append("_");
        sb.append(b);
        sb.append("_");
        sb.append(c);
        sb.append("_");
        sb.append(d);
        sb.append(".png");
        try {
            javax.imageio.ImageIO.write(mentKép, "png",
                    new java.io.File(sb.toString()));
        } catch(java.io.IOException e) {
            e.printStackTrace();
        }
    }    
    public void paint(java.awt.Graphics g) {
         g.drawImage(kép, 0, 0, this);        
        if(számításFut) {
            g.setColor(java.awt.Color.RED);
            g.drawLine(0, sor, getWidth(), sor);
        }         
        g.setColor(java.awt.Color.GREEN);
        g.drawRect(x, y, mx, my);
    }
    public static void main(String[] args) {
        new MandelbrotHalmazNagyító(-2.0, .7, -1.35, 1.35, 600, 255);
    }
}
]]></programlisting>
        <mediaobject>
          <imageobject condition="printf">
            <imagedata fileref="img/javanagy.png" format="PNG" scale="30"/>
          </imageobject>
        </mediaobject> 
        <mediaobject>
          <imageobject condition="printf">
            <imagedata fileref="img/javakicsi.png" format="PNG" scale="30"/>
          </imageobject>
        </mediaobject>
    </section>

</chapter>                
