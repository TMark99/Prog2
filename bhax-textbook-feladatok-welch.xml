<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Welch!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Első osztályom</title>
        <para>
            Valósítsd meg C++-ban és Java-ban az módosított polártranszformációs algoritmust! A matek háttér 
            teljesen irreleváns, csak annyiban érdekes, hogy az algoritmus egy számítása során két normálist
            számol ki, az egyiket elspájzolod és egy további logikai taggal az osztályban jelzed, hogy van vagy
            nincs eltéve kiszámolt szám.
        </para>
        <programlisting language="c"><![CDATA[ 
#include <iostream>
#include <math.h>
#include <pthread.h>
#include <ctime>


class PolarGen
{
public:
  PolarGen()
  {
    nincsTarolt = true;
    std::srand (std::time(NULL));
  }
  ~PolarGen()
  {
  }
  double kovetkezo();
private:
  bool nincsTarolt;
  double tarolt;
};
double PolarGen::kovetkezo ()
{
  if (nincsTarolt)
  {
    double u1, u2, v1, v2, w;
        do
      {
        u1= std::rand() / (RAND_MAX +1.0);
        u2= std::rand() / (RAND_MAX +1.0);
        v1=2*u1-1;
        v2=2*u1-1;
        w=v1*v1+v2*v2;
           }
    while (w>1);
    double r =std::sqrt ((-2 * std::log(w)) /w);
    tarolt=r*v2;
    nincsTarolt =!nincsTarolt;
    return r* v1;
   }
   else
   {
    nincsTarolt =!nincsTarolt;
    return tarolt;
   }
}
int main (int argc, char **argv)
{
    PolarGen pg;
    for (int i= 0; i<10;i++)
      std::cout<<pg.kovetkezo ()<< std::endl;
    return 0;
}
]]></programlisting>        
        <para>
            Ez a program véletlenszerűen fog számokat generálni nekünk. Azért csak véletlenszerűen, mert a véletlent nem lehet generálni, már ha egyáltalán úgy gondoljuk, hogy létezik véletlen. Ezt egy osztályon belül fogjuk kivitelezni. Az osztály neve a PolarGen-t kapta. Két részre tudjuk bontani. Van egy nyilvános és egy privát. A nyilvános részhez hozzá tudunk férni, viszont a privát részt, csak az osztályon belül tudjuk meghívni. Az osztály elején egyből ott van a koonstruktor ezt onnan tudjuk felismerni, hogy ugyan úgy hívjuk ahogyan az osztályt is. Ebben kezdő értékeket tudunk adni és egy objektum létrehozásával egyből lefut. Esetünkben most a "nincsTarolt" privát változó értékét fogja "True"-ra állítani és az srand is itt lesz, ami a véletlenszerű szám generálásához kell. Utánna van a destruktor ami ugyan úgy néz ki mint a konstruktor csak előtte van '~' jel. Ez a program végén fog lefutni. Ebben felszabadítjuk a memóriát. A privát részben létrehozunk egy logikai és egy double tipusú változót. A kovetkezo() függvény az, amiben a random számokat fogjuk létrehozni. Azt, hogy ezt hogyan végezzük matematikailag, most figyelmenkívül hagyjuk. A main függvényben meghívunk egy osztálytípusú változót. Ez fogja beindítani a konstruktort. Utánna pedig egy forciklusban tíz véletlen száot íratunk ki.            
        </para>
	<mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="img/polc.png" format="PNG" scale="30"/>
        	</imageobject>
        </mediaobject>
	<para>
            Látható, hogy a meghívás során különböző értékeket kapunk vissza, amelyeket a program kétszer ír ki.
        </para>
        <para>
            Java:
        </para>
         <programlisting language = "java"><![CDATA[
public class PolarGenerator
{
    boolean nincsTarolt = true;
    double tarolt;
    
    public PolarGenerator()
    {
        nincsTarolt = true;
    }
    
    public double kovetkezo() 
    {
        if(nincsTarolt)
        {
            double u1, u2, v1, v2, w;
            do{
                u1 = Math.random();
                u2 = Math.random();
                v1 = 2* u1 -1;
                v2 = 2* u2 -1;
                w = v1*v1 + v2*v2;
            } while (w>1);
            
            double r = Math.sqrt((-2 * Math.log(w) / w));
            tarolt = r * v2;
            nincsTarolt = !nincsTarolt;
            return r * v1;
        }
        else
        {
            nincsTarolt = !nincsTarolt;
            return tarolt;
        }
    }
    
    public static void main(String[] args)
    {
        PolarGenerator g = new PolarGenerator();
        for (int i = 0; i < 10; ++i)
        {
            System.out.println(g.kovetkezo());
        }
    }
}]]>
            </programlisting>
            <para>
                Ez az előző program csak javaban megírva. A program felépítése sokkal átláthatóbb és egyszerűbb lett. Alapjaiban ugyan úgy működik mint a C++ megfelelője.
            </para>
	<mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="img/poljava.png" format="PNG" scale="30"/>
        	</imageobject>
        </mediaobject> 
        <para>
                A képen látható, hogy a Java változatt is különböző értékeket add a két meghívás során.
            </para>   
    </section>        

    <section>
        <title>LZW</title>
        <para>
            Valósítsd meg C-ben az LZW algoritmus fa-építését!
        </para>
        <para>
            A program a bemeneti adatokból egy bináris fát épít. Bármely típusú fa ábrázolható bináris fa segítségével. A bináris fa legfőbb jellemzője az, hogy bármelyik csomópontnak csak legfeljebb két utóda lehet. A bináris fák utódjait megkülönböztetjük aszerint, hogy bal illetve jobb részfák. A fa 0 és 1 számokból épül fel. A kitüntetett elem a gyökér. Innen minden elemet el tudunk érni. A következőben megnézzük, hogy is működik ez. Az eltérés, hog itt nem fő függvény van, hanem minden egy osztály része.
        </para>
         <para>
            A kód forrása:<link xlink:href="https://progpater.blog.hu/2011/03/05/labormeres_otthon_avagy_hogyan_dolgozok_fel_egy_pedat?fbclid=IwAR0R_H4ol5laHPvyjt-p5MQomtcQIdfTeZvPInhgRxu-CCsxGOx453MSrGk">https://progpater.blog.hu/2011/03/05/labormeres_otthon_avagy_hogyan_dolgozok_fel_egy_pedat?fbclid=IwAR0R_H4ol5laHPvyjt-p5MQomtcQIdfTeZvPInhgRxu-CCsxGOx453MSrGk</link> 
        </para>
         <programlisting language="c"><![CDATA[   
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <math.h>
typedef struct binfa
{
  int ertek;
  struct binfa *bal_nulla;
  struct binfa *jobb_egy;
} BINFA, *BINFA_PTR;
BINFA_PTR
uj_elem ()
{
  BINFA_PTR p;
  if ((p = (BINFA_PTR) malloc (sizeof (BINFA))) == NULL)
    {
      perror ("memoria");
      exit (EXIT_FAILURE);
    }
  return p;
}
extern void kiir (BINFA_PTR elem);
extern void ratlag (BINFA_PTR elem);
extern void rszoras (BINFA_PTR elem);
extern void szabadit (BINFA_PTR elem);
int
main (int argc, char **argv)
{
  char b;
  BINFA_PTR gyoker = uj_elem ();
  gyoker->ertek = '/';
  gyoker->bal_nulla = gyoker->jobb_egy = NULL;
  BINFA_PTR fa = gyoker;
  while (read (0, (void *) &b, 1))
    {
      if (b == '0')
    {
      if (fa->bal_nulla == NULL)
        {
          fa->bal_nulla = uj_elem ();
          fa->bal_nulla->ertek = 0;
          fa->bal_nulla->bal_nulla = fa->bal_nulla->jobb_egy = NULL;
          fa = gyoker;
        }
      else
        {
          fa = fa->bal_nulla;
        }
    }
      else
    {
      if (fa->jobb_egy == NULL)
        {
          fa->jobb_egy = uj_elem ();
          fa->jobb_egy->ertek = 1;
          fa->jobb_egy->bal_nulla = fa->jobb_egy->jobb_egy = NULL;
          fa = gyoker;
        }
      else
        {
          fa = fa->jobb_egy;
        }
    }
    }
  printf ("\n");
  kiir (gyoker);
  
  extern int max_melyseg, atlagosszeg, melyseg, atlagdb;
  extern double szorasosszeg, atlag;
  printf ("melyseg=%d\n", max_melyseg-1);
  
  atlagosszeg = 0;
  melyseg = 0;
  atlagdb = 0;
  ratlag (gyoker);
  atlag = ((double)atlagosszeg) / atlagdb;
  atlagosszeg = 0;
  melyseg = 0;
  atlagdb = 0;
  szorasosszeg = 0.0;
 rszoras (gyoker);
  double szoras = 0.0;
  if (atlagdb - 1 > 0)
    szoras = sqrt( szorasosszeg / (atlagdb - 1));
  else
    szoras = sqrt (szorasosszeg);
  printf ("altag=%f\nszoras=%f\n", atlag, szoras);*/
  szabadit (gyoker);
}
 
int atlagosszeg = 0, melyseg = 0, atlagdb = 0;
void
ratlag (BINFA_PTR fa)
{
  if (fa != NULL)
    {
      ++melyseg;
      ratlag (fa->jobb_egy);
      ratlag (fa->bal_nulla);
      --melyseg;
      if (fa->jobb_egy == NULL && fa->bal_nulla == NULL)
    {
      ++atlagdb;
      atlagosszeg += melyseg;
    }
    }
}
double szorasosszeg = 0.0, atlag = 0.0;
void
rszoras (BINFA_PTR fa)
{
  if (fa != NULL)
    {
      ++melyseg;
      rszoras (fa->jobb_egy);
      rszoras (fa->bal_nulla);
      --melyseg;
      if (fa->jobb_egy == NULL && fa->bal_nulla == NULL)
    {
      ++atlagdb;
      szorasosszeg += ((melyseg - atlag) * (melyseg - atlag));
    }
    }
}
int max_melyseg = 0;
void
kiir (BINFA_PTR elem)
{
  if (elem != NULL)
    {
      ++melyseg;
      if (melyseg > max_melyseg)
    max_melyseg = melyseg;
      kiir (elem->jobb_egy);
      for (int i = 0; i < melyseg; ++i)
    printf ("---");
      printf ("%c(%d)\n", elem->ertek < 2 ? '0' + elem->ertek : elem->ertek,
          melyseg-1);
      kiir (elem->bal_nulla);
      --melyseg;
    }
}
void
szabadit (BINFA_PTR elem)
{
  if (elem != NULL)
    {
      szabadit (elem->jobb_egy);
      szabadit (elem->bal_nulla);
      free (elem);
    }
}
        ]]></programlisting>
        <para>
            Magyarázat: Elsőnek is a szükséges headereket deklaráljuk. Ezek után pedig a Binfánk struktúráját. A struktúra egy egészet tartalmaz aminek a neve "ertek" és 2 mutatóval fog rendelkezni, amiben bal és jobb gyermekeket tároljuk majd.Az 1 érték jobbra fog kerülni, a 0 balra. A "typdef"-vel adunk neki egy nevet, amivel a programon belül fogjuk hívni. Ezután az uj_elem függvény következik. Ez fogja nekünk lefoglalni a tárhelyet a memóriában, ami "NULL" kezdőértékkel fog rendelkezni. Ha nincs memória, akkor hibát dob ki. A végén vissza adja a lefoglalt mutatót. Utánna függvény prototipusokat kapunk, ezek közül a feladatnak megfelelően csak a kiir() és a szabadit() függvényeket fogjuk megvizsgálni. Ugorjunk a main fő függvényre. Az első egy char tipusú változó, ebben fogjuk tárolni ideiglenesen a beolvasott karaktert. Aztán létrehozzuk a gyökérelemet és értékül adunk neki egy karaktert, jelen esetben '/'. A while ciklusban fog zajlani a faépítés. Először is megvizsgálja a beolvasott karaktert. Mindig a gyökér elemtől indul. Ha a beolvasott karakter értéke 0, akkor először megvizsgálja, hogy a gyökérnek vagy az adott csomópontnak van e bal_nullas gyermeke, ha van, akkor rálép a csomópontra, ha viszont nincs, akkor a gyökérnek vagy az adott csomópontnak létrehoz egy bal_nullas gyermeket. Ha a beolvasott karakter értéke 1, akkor a program ugyan ezen az elven mint a 0-ás értéknél végig vizsgálja, csak a jobb_egyes gyermekkel. Most következik a kiír és a szabadit függvény. A szabadit() függvény egy rekurzív függvény. Törli a memóriából az eltárolt elemeket. A kiir() függvény is rekúrzív függvény. Bejárja a fa elemeit.
        </para>
	<mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="img/binfa.png" format="PNG" scale="30"/>
        	</imageobject>
        </mediaobject> 
	<para>
            A képen látható  a futatás után létrehozott binfa kirajzolása és egyébb adatok.
        </para>
    </section>        
        
    <section>
        <title>Fabejárás</title>
        <para>
            Járd be az előző (inorder bejárású) fát pre- és posztorder is!
        </para>
         <para>
            A fabejáránsak 3 tipusa van, preorder, inorder és postorder. 
         </para>   
        <para>
            Kezdjük a preorder fabejárással. Itt mindig a gyökérrel kezdi a program a vizsgálatot, aztán a bal oldalt legvégezetül, pedig a jobb oldalt fogja bejárni.
        </para>
         <programlisting language="c"><![CDATA[
//preorder fabejárás:
void
kiir (BINFA_PTR elem)
{
  if (elem != NULL)
    {
	printf ("%c", elem->ertek < 2 ? '0' + elem->ertek : elem->ertek);      
	kiir (elem->bal_nulla);	
	kiir (elem->jobb_egy);      
    }
}
        ]]></programlisting>
        <para>
            Inorder fabejárás: Az inorder fabejárásnál először a bal oldalt vizsgáljuk meg, utánna jön a gyökér és legvégül pedig a jobb oldalt nézzük.           
        </para>
	<programlisting language="c"><![CDATA[
//inorder fabejárás:
void
kiir (BINFA_PTR elem)
{
  if (elem != NULL)
    {
	kiir (elem->bal_nulla);
	printf ("%c", elem->ertek < 2 ? '0' + elem->ertek : elem->ertek);      	
	kiir (elem->jobb_egy);      
    }
}
        ]]></programlisting>
        <para>
            A postorder fabejárás: Itt először a fa bal oldalát fogja átvizsgálni, aztán a jobb oldalt, legutoljára pedig a gyökeret vizsgáljuk.
        </para>
         <programlisting language="c"><![CDATA[
//postorder fabejárás:            
void
kiir (BINFA_PTR elem)
{
  if (elem != NULL)
    {
	kiir (elem->bal_nulla);     	
	kiir (elem->jobb_egy);
	printf ("%c", elem->ertek < 2 ? '0' + elem->ertek : elem->ertek);       
    }
}
        ]]></programlisting>
	<para>
            Ahogy a kodolásban látszik a három bejárás megvalosítása szinte semmiben sem különbözik. A változás csupán annyi, hogy az elemet kiíró sor hanyadik utasítás az alprogramban. A lenti képen látható lesz, hogy az egyes bejárások során hova kerül a gyökér elem, ami a / karakter lesz.
        </para>
	<mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="img/bejar.png" format="PNG" scale="30"/>
        	</imageobject>
        </mediaobject>
    </section>        
                        
    <section>
        <title>Tag a gyökér</title>
        <para>
            Az LZW algoritmust ültesd át egy C++ osztályba, legyen egy Tree és egy beágyazott Node
            osztálya. A gyökér csomópont legyen kompozícióban a fával!
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://progpater.blog.hu/2011/03/31/imadni_fogjatok_a_c_t_egy_emberkent_tiszta_szivbol">https://progpater.blog.hu/2011/03/31/imadni_fogjatok_a_c_t_egy_emberkent_tiszta_szivbol</link>                
        </para>
        <para>
            Az alábbi program a fenti C változatnak lesz úgymond a C++ változata. Az első lépés, hogy ami C-ben struktúra volt, azt átírjuk C++-ban egy osztályba, mivel a C++-ban megtehetjük. Ez az alábbi módon fog kinézni:
        </para>
 <programlisting language="c"><![CDATA[
        class LZWBinFa
        {
        public:
        LZWBinFa (char b = '/'):betu (b), balNulla (NULL), jobbEgy (NULL) {};
        ~LZWBinFa () {};
            void operator<<(char b)
    {
        if (b == '0')
        {
            // van '0'-s gyermeke az aktuális csomópontnak?
            if (!fa->nullasGyermek ()) // ha nincs, csinálunk
            {
                Csomopont *uj = new Csomopont ('0');
                fa->ujNullasGyermek (uj);
                fa = &gyoker;
            }
            else // ha van, arra lépünk
            {
                fa = fa->nullasGyermek ();
            }
        }
        else
        {
            if (!fa->egyesGyermek ())
            {
                Csomopont *uj = new Csomopont ('1');
                fa->ujEgyesGyermek (uj);
                fa = &gyoker;
            }
            else
            {
                fa = fa->egyesGyermek ();
            }
        }
    }
        
        ]]></programlisting>
        <para>
           Ezen belül fogjuk a gyökeret létrehozni és értékül adni neki a '/'-t. A mutatóinak értékét 0-ra állítjuk. Ezek után jön a faépítés a már fentiekben elmagyarázott módon. A program megnézi, hogy 1-est vagy 0 érkezik a bemenetről. Itt azt látjuk, hogy a betétel a <function><![CDATA[<<]]></function>  operátorral történik, ez annyiban különbözik a C-ben írt programtól, hogy ez egyből beleteszi a fába a beérkezett karaktert. Egy új csomópontot a "new" szóval tudunk létrehozni, ha szükséges. Ez azért lehetséges mert van egy Csomópont osztályunk (Lásd a lenti programban). A Class csomóponton belül az egyesGyermek() és a nullasGyermek() függvények a gyermekükre mutató pointereket fogják tartalmazni. Az ujNullasGyermek és au ujEgyesGyermek-nek pedig adunk egy gyermeket ás arra fogja állítani a mutatót. A private részben fogjuk ezeket deklarálni, ez azt jelenti, hogy csak az osztályon belül használhatóak ezek a változók. A legvégén jön a main főfüggvény. Itt deklaráljuk a char tipusú változót amibe beolvasunk és innen kerül az osztályokhoz. Végül meghívjuk a kiir és a szabadit függvényeket amire példát az előző programokban találunk. Ugye a kiir()-al kiíratjuk az eredmény és a szabadit()-al pedig felszabadítjuk a lefoglalt meróriát.
         </para>
         <programlisting language="c"><![CDATA[
class Csomopont
    {
    public:
        Csomopont (char b = '/'):betu (b), balNulla (0), jobbEgy (0) {};
        ~Csomopont () {};
        Csomopont *nullasGyermek () {
            return balNulla;
        }
        Csomopont *egyesGyermek ()
        {
            return jobbEgy;
        }
        void ujNullasGyermek (Csomopont * gy)
        {
            balNulla = gy;
        }
        void ujEgyesGyermek (Csomopont * gy)
        {
            jobbEgy = gy;
        }
    private:
        friend class LZWBinFa;
        char betu;
        Csomopont *balNulla;
        Csomopont *jobbEgy;
        Csomopont (const Csomopont &);
        Csomopont & operator=(const Csomopont &);
    }; 
    
  int main ()
  {
        char b;
        LZWBinFa binFa;
        while (std::cin >> b)
        {
        binFa << b;
        }
    binFa.kiir ();
    binFa.szabadit ();
    return 0;
    }    
        ]]></programlisting>
    </section>        
                
    <section>
        <title>Mutató a gyökér</title>
        <para>
            Írd át az előző forrást, hogy a gyökér csomópont ne kompozícióban, csak aggregációban legyen a fával!
        </para>
        <para>
            Vegyük alapul a C++ ban megírt LZWBinfa-t. Első dolgunk, hogy a fában a gyökér elemet átalakítjuk egy mutatóvá. Azt az alábbi módon fogjuk megcsinálni: A gyökér elem a protected részén van az osztálynak. Itt az eredeti "Csomopont gyoker;" az alábbi módon átírunk:
        </para>
        <programlisting language = "c">
          <![CDATA[
protected:          
Csomopont *gyoker; 
int maxMelyseg;
double atlag, szoras;
          ]]>
</programlisting>
        <para>
            Ugye C++ ban a mutatót egy '*'-al jelüljuk. Ha most futtatnánk a programot, akkor számtalan hibába ütköznénk. Ezeket ki kell javítanunk. A programban így nem a gyökér memóriacímét kell átadnunk (Töröljük az összes referenciajelet a gyokerek előtt) és mivel mutató lett a gyökér így nem '.'-al hiavatkozunk hanem '->'-al. Itt láthatunk példát arra, hogy hogyan:
        </para>
<programlisting language = "c"><![CDATA[
//előtte:
fa=&gyoker;
//utánna:
fa=gyoker;
 
//előtte:
szabadit (gyoker.egyesGyermek ());
szabadit (gyoker.nullasGyermek ());
//utánna:
szabadit (gyoker->egyesGyermek ());
szabadit (gyoker->nullasGyermek ());
    }]]>
</programlisting>
    <para>
        Ha mindezek után lefuttatjuk a programunkat az lefordul, azonban futtatáskor szegmentális hibába ütközünk. Ez azért van, ugyanis a gyökér memóriacíme nincs lefoglalva. Ennek a megoldását a konstruktorban és a destruktorban fogjuk megalkotni. A konstruktorban foglaljuk le és a destruktorba fogjuk törölni a lefoglalt memóriát. Lásd:
    </para>
  <programlisting language = "c"><![CDATA[
LZWBinFa ()
    {
    gyoker= new Csomopont('/');
    fa = gyoker;
    }
~LZWBinFa ()
    {
    szabadit (gyoker->egyesGyermek ());
    szabadit (gyoker->nullasGyermek ());
    delete(gyoker);
    }]]>
</programlisting>
    </section>                            

    <section>
        <title>Mozgató szemantika</title>
        <para>
         Megoldás forrása: <link xlink:href="httsp://sourceforge.net/p/udprog/code/ci/master/tree/source/vedes/elso/z3a7.cpp">httsp://sourceforge.net/p/udprog/code/ci/master/tree/source/vedes/elso/z3a7.cpp</link>    
	</para>   
	<para>
	Védési videó: <link xlink:href="https://www.youtube.com/watch?v=S8bM0rewaTE">https://www.youtube.com/watch?v=S8bM0rewaTE</link>
        </para>
        <programlisting language="c++"><![CDATA[
   		 LZWBinFa ( const LZWBinFa & regi ) {

          gyoker.ujEgyesGyermek ( masol ( regi.gyoker.egyesGyermek (), regi.fa ) );
          gyoker.ujNullasGyermek ( masol ( regi.gyoker.nullasGyermek (), regi.fa ) );

          if ( regi.fa == & ( regi.gyoker ) )
               fa = &gyoker;

     }

     LZWBinFa ( LZWBinFa && regi ) {

          gyoker.ujEgyesGyermek ( regi.gyoker.egyesGyermek() );
          gyoker.ujNullasGyermek ( regi.gyoker.nullasGyermek() );

          regi.gyoker.ujEgyesGyermek ( nullptr );
          regi.gyoker.ujNullasGyermek ( nullptr );

     }

        	]]></programlisting>
        	  <programlisting language="c++"><![CDATA[
       Csomopont *  masol ( Csomopont * elem, Csomopont * regifa ) {

          Csomopont * ujelem = NULL;

          if ( elem != NULL ) {
               ujelem = new Csomopont ( elem->getBetu() );

               ujelem->ujEgyesGyermek ( masol ( elem->egyesGyermek (), regifa ) );
               ujelem->ujNullasGyermek ( masol ( elem->nullasGyermek (), regifa ) );

               if ( regifa == elem )
                    fa = ujelem;

          }

          return ujelem;
     }
]]></programlisting>
<para>
		A forráskódban a binfa működése gyakorlatilag nem változik semmit, ezért arról nem is írnék részletesebben. A mozgató szemantika titka viszont annyiban merül ki, hogy a először is szükségünk van egy másoló konstruktorra, ami egy olyan függvény lesz, ami megkapja a binfa elemeit és ezeket új memóriacímen új jobb és bal elemekként lementi. Ezzel építünk gyakorlatilag egy új fát, aminek minden eleme megegyezik az eredeti fánknak az elemeivel. Amikor ez megtörténik, régi fánknak a gyökerének a pointereit átállítjuk null pointerekre, ezzel pedig töröltük azoknak az elemeit és már csak az új fánk létezik.
	</para>
	<para>
		A fánk mozgatását a main-ben a std::move függvénnyel fogjuk elérni, ami magától nem fogja mozgatni a binfánkat, csakis akkor, ha ehhez meg van írva már a mozgató konstruktorunk.
	</para>

    </section>                     

</chapter>                
