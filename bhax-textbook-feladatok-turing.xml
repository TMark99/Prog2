<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: Egy végtelen ciklust rengetek modón meglehet határoni, a legegyszerűbb módja a for(;;). A mellett, hogy ez egyszerű, mások is egyértelműen érteni fogják, hogy oda végtelen ciklust szerettünk volna rakni.
A fordító a for-os és while-os ciklusból ugyanazt az assembly kódot fordítja, a for használata csak áltlahatóság és egyértelműség céljából ajánlot.
        </para>
        <para>
	A végtelen ciklusunk nem csak a meghatározásban, hanem a procceszor terhelésében is különbözhet, úgyan is leterhelhetjük azt, egyáltalán nem is zavarjuk meg vagy csak pár magot dolgoztatunk meg.
	</para>
	<para>
	0%-ban terhelhetjük a végtelen ciklusunkban a sleep függvényt is szerepeltetjük. Fontos megjegyezni, hogy a fűggvény használatához szükségünk van az unistd.h-ra.
	</para>
	<programlisting language="c"><![CDATA[
	#include <stdio.h>
	#include <unistd.h>
	int main()
	{
		while(1)
		{
		sleep(100);
 		}
	}
	]]></programlisting>
	<mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="img/nulla.png" format="PNG" scale="30"/>
        	</imageobject>
        </mediaobject>
	<para>
	Látható, hogy az a.out az az a programunk, nem terheli a proceszort.
	</para>
	<para>
	Egy magot 100%-ban dolgoztatni nagyon egyszerű, mivel semmi egyébre nincs szükségünk, mint leírni a végtelen ciklust.
	</para>
	<programlisting language="c"><![CDATA[
	#include <stdio.h>
	int main()
	{
		for(;;);
	}
	]]></programlisting>
	<mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="img/100.png" format="PNG" scale="30"/>
        	</imageobject>
        </mediaobject>
<para>
	Látható, hogy az a.out az az a programunk, csak az egyik magot terheli.
	</para>
	<para>
	Ha azt szeretnénk, hogy a végtelen ciklusunk minden magot dolgoztasson kicsit többet kell gépelnünk. Hozzá kell adjuk a #pragma omp parallel sort, amivel azt érjük el, hogy a folyamatott több magon futassa. használatához szükségünk van az omp-hra. (A fordításnál -fopenmp kapcsolóval kell bővítenünk a parancsot.)
	</para>
	<programlisting language="c"><![CDATA[
	#include <stdio.h>
	#include <omp.h>
	int main()
	{
		#pragma omp parallel
		for(;;)
	}
	]]></programlisting>
<mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="img/mind.png" format="PNG" scale="30"/>
        	</imageobject>
        </mediaobject>
<para>
	Látható, hogy az a.out az az a programunk, minden magot terhel. Igaz a képen nem 100%-ban úgyan is az üres végtelen ciklus elé veszi azokat a programokat, amelyek ténylegesen "dolgoznak".
	</para>
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat: Ha úgy vesszük, hogy a T100 és T1000 létező program és T1000 ben meghívjuk saját magát. A t100 alapján ha a programunkba van végtelen ciklus, akkor igaz értéket ad a Lefagy program a Lefagy2 programnak ,így tehát az is igaz értéket fog adni, viszont ha a Lefagy false értéket ad vissza akkor a Lefagy2 belép egy végtelen ciklusba, vagyis a program le fog fagyni. Ebből következik, hogy olyan program, mint a T100 nem működik mivel, ha egy olyan program érkezik bele amiben van végtelen ciklus, akkor a program beáll mert a ciklus nem áll meg. 
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Napjainkba a számítógép fejlettsége és gyorsasága miatt, már egyszerűen megcsinálhatjuk egy segédváltozóval vagy exort-tal, de régen nagyon sokat számított az erőforrások jó felhasználása, elosztása. Ezekkel a megoldásokkal sokkal könnyebb volt a számítógépeknek számolni, ha különbséggel vagy szorzással cseréltük fel a változókat. Az utóbbi kettőt nézzük most meg.
        </para>
	<para>
            Változócsere különbséggel:
        </para>
	<programlisting language="c"><![CDATA[
	#include <stdio.h>
	#include <stdlib.h>
	int main()
	{
    		int a=1;
    		int b=2;
    		printf("%s\n%d %d\n","kulonbseggel:",a,b);
    		a=a-b;
		b=a+b;
		a=b-a;
    		printf("%d %d\n",a,b);
	}
	]]></programlisting>
	<para>
            A printf() függvény a kiíratáshoz használjuk. Az első argumentum a kíratás formátuma, a többi pedig a változók kiíratása. A „%d” azt jelenti, hogy egy egész típusú változót fogunk kiíratni, még a „\n” a sortörést.
        </para>
	<para>
            Változócsere szorzattal:
        </para>
	<programlisting language="c"><![CDATA[
	#include <stdio.h>
	#include <stdlib.h>
	int main()
	{
    		int a=1;
    		int b=2;
    		printf("%s\n%d %d\n","szorzassal:",a,b);
    		a=a*b;
    		b=a/b;
    		a=a/b;
    		printf("%d %d\n",a,b);
	}
	]]></programlisting>
	<para>
            A megoldás itt annyiban különbözik, hogy nem „+” és „–„ -t használunk hanem „*” és „/” -t.
        </para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <programlisting language="c"><![CDATA[
#include <stdio.h>
#include <curses.h>
#include <unistd.h>
int
main ( void )
{
    WINDOW *ablak;
    ablak = initscr ();
    int x = 0;
    int y = 0;
    int xnov = 1;
    int ynov = 1;
    int mx;
    int my;
    for ( ;; ) {
        getmaxyx ( ablak, my , mx );
        mvprintw ( y, x, "O" );
        refresh ();
        usleep ( 100000 );
        x = x + xnov;
        y = y + ynov;
        if ( x>=mx-1 ) {
            xnov = xnov * -1;
        }
        if ( x<=0 ) { 
            xnov = xnov * -1;
        }
        if ( y<=0 ) { 
            ynov = ynov * -1;
        }
        if ( y>=my-1 ) { 
            ynov = ynov * -1;
        }
    }
    return 0;
}
        ]]></programlisting>
        <para>
        	Forrás:<link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
	<para>
	A fejlécben azonal feltünik újdonság ként a curses.h header, amit azért használunk, hogy elérjük a képernyő kezelő fűggvényeket.
        </para>
	<programlisting language="c"><![CDATA[
    WINDOW *ablak;
    ablak = initscr ();
        ]]></programlisting>
        <para>
             Így hozzuk létre a kimenetet. Az initscr () függvény curses módba lépteti a terminált.
        </para>
        <para>
            A deklarált x és y -on lesz a kezdő értékünk. Az xnov és ynov pedig a lépésközt mutatja. (lépésenként a koordináta rendszeren xnov, ynov-al való elmozdulást). Az mx és my lesznek a határértékek, hogy a program csak az ablakon belül mozogjon és ne lépjen kibelőle. Ez az a határ ahol a labda visszapattan.
        </para>
        <para>
            A végtelen ciklus következtében, a labda addig pattog, amíg a program fút. A ciklusban az első függvény a getmaxyx (), ez határozza meg,hogy mekkora az ablakunk mérete. A refresh() függvénnyel frissítjük az ablakot, ezzel látjuk a labda mozgását, a frissítés nélkül a labda végig egy helyben állna a kijelzőn. Közöttük a mvprintw() függvény az x és y tengelyen megrazolja a „ „ között lévő szöveget, számot vagy karaktert, esetünkben az O-t. Az usleep függvény azt szabályozza mennyi ideig altassa a ciklust még újra indul, azaz milyen gyorsan mozogjon a labda. 
        </para>
        <programlisting language="c"><![CDATA[
        x = x + xnov;
        y = y + ynov;
        ]]></programlisting>
        <para>
        	Megnöveljük az értékeket, minden ciklus lefutásnál (mozog a "labda").
        </para>
	<para>
        	A kővetkező négy if-el pedig azt vizsgáljuk, hogy a labda az ablak szélén van e. Ha igen akkor -1 -el szorozzuk, ezáltal a labda irányt változtat. A fordításnál -lncourses kapcsolót kell használnunk.
        </para>
	<para>
        	Most nézzük meg a programot if-ek nélkül.
        </para>
	<para>
        	Forrás:<link xlink:href="https://progpater.blog.hu/2011/02/13/megtalaltam_neo_t">https://progpater.blog.hu/2011/02/13/megtalaltam_neo_t</link>
        </para>
        <programlisting language="c"><![CDATA[
#include <stdio.h>
#include <stdlib.h>
#include <curses.h>
#include <unistd.h>
int
main (void)
{
    int xj = 0, xk = 0, yj = 0, yk = 0;
    int mx = 80 * 2, my = 24 * 2;
    WINDOW *ablak;
    ablak = initscr ();
    noecho ();
    cbreak ();
    nodelay (ablak, true);
    for (;;)
    {
        xj = (xj - 1) % mx;
        xk = (xk + 1) % mx;
        yj = (yj - 1) % my;
        yk = (yk + 1) % my;
        clear ();
        mvprintw (0, 0,
                  "--------------------------------------------------------------------------------");
        mvprintw (24, 0,
                  "--------------------------------------------------------------------------------");
        mvprintw (abs ((yj + (my - yk)) / 2),
                  abs ((xj + (mx - xk)) / 2), "X");
        refresh ();
        usleep (150000);
    }
    return 0;
}
        ]]></programlisting>
	<para>
        	Magyarázat: Az if-ek helyet megoldáshoz most szükségünk van matematikai számításokra, ehez deklarálunk egész tipusú változókat. A számításokat egy végtelen ciklusban számoljuk és mvprinw-vel íratjuk ki a képernyőre. A clear()-el minden egyes számítás előtt letisztítjuk az ablakot, ez azt csinálja, amit az elözőnél a refresh(). Az eslő kettő mvprintw-vel a felső és alsó határokat rajzoljuk ki, ebben a dobozban fog pattogni a labda. A harmadikkal pedig a "Labdát". Az Usleep függvény itt is a pattogás sebbeségét határozza meg.
        </para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <programlisting language="c"><![CDATA[
#include <stdio.h>
int main()
{
   int a=1;
   int bit=0;
   do
   bit++;	
   while(a<<=1);
   printf("%d %s\n",bit,"bites a szohossz a gepen");
} 
        ]]></programlisting>
         <para>
          Ez a program a gépünk szó hosszát fogja kiírni, azaz az <type>int</type> méretét.
          A feladatot a BogoMIPS ben használt while ciklus feltétellel írjuk meg (A BogoMIPS a processzorunk sebbeségét lemérő program amit Linus Torvalds írt meg). 
        </para>
        <para>
          A main függvényben az első sorban deklaráljuk a változót, amivel megvizsgáljuk a gépünk szóhosszát(int méretét).  A "bit" változó fogja a lépéseket számlálni. A programot dowhile ciklussal(hátultesztelős) írjuk meg, mivel a sima while nem számítaná bele az első lépést. Ha még is while-val szeretnénk megírni, a kiíratás előtt a végeredmény növelnünk kell eggyel. A ciklus addig fut amíg az "a" nem lesz egyenlő nullával. 
        </para>
	<para>
	Mi a bitshift operátor? Ugye vesszük az egyet. Ennek a bináris kódja a 0001, a bitshift operátor egy 0 -val eltolja, azaz 0010 kapjuk, ez a 2 szám, a count növekedik tehát az értéke 1 lesz.  A ciklus újra lefut és eltolja még egyszer a számot egy 0-val, így 0100 kapunk ami a négy.  Ez addig fut, még a gépünk szó hosszán (az int méretén) kívül nem tolja az 1-est. Ekkor a változónk értké 0 lesz. A ciklus befejeződik, és kiíratjuk hányat lépett. Ez a szám adja meg, hogy hány bites a szóhossz.
	</para>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            A PageRank egy keresőmotor amit a Google használ. A programot két fiatal írta meg 1998-ban. Nevét az egyik kitalálója után kapta. 
        </para>
        <para>
        	A következőben, egy 4 lapból álló PageRank-at fogunk megnézni. A lapok PageRank-ét az alapján nézzük, hogy hány oldal osztotta meg a saját honlapján az oldal hiperlinkjét. 
        </para>
        <programlisting language="c"><![CDATA[
#include <stdio.h>
#include <math.h>
void
kiir (double tomb[], int db)
{
  int i;
  for (i = 0; i < db; ++i)
    printf ("%f\n", tomb[i]);
}
double
tavolsag (double PR[], double PRv[], int n)
{
  double osszeg = 0.0;
  int i;
  for (i = 0; i < n; ++i)
    osszeg += (PRv[i] - PR[i]) * (PRv[i] - PR[i]);
  return sqrt(osszeg);
}
int
main (void)
{
  double L[4][4] = {
    {0.0, 0.0, 1.0 / 3.0, 0.0},
    {1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0},
    {0.0, 1.0 / 2.0, 0.0, 0.0},
    {0.0, 0.0, 1.0 / 3.0, 0.0}
  };
  double PR[4] = { 0.0, 0.0, 0.0, 0.0 };
  double PRv[4] = { 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0 };
  int i, j;
  for (;;)
    {
      for (i = 0; i < 4; ++i)
	{
	  PR[i] = 0.0;
	  for (j = 0; j < 4; ++j)
	    PR[i] += (L[i][j] * PRv[j]);
	}
      if (tavolsag (PR, PRv, 4) < 0.00000001)
	break;
      for (i = 0; i < 4; ++i)
	PRv[i] = PR[i];
    }
  kiir (PR, 4);
  return 0;
}
        ]]></programlisting>
        <para>
        	Forrás:<link xlink:href="https://progpater.blog.hu/2011/02/13/bearazzuk_a_masodik_labort">https://progpater.blog.hu/2011/02/13/bearazzuk_a_masodik_labort</link>
        </para>
	<para>
        	Kezdjük az új headerrel, ez a math.h. Ez tartalmazza a matematikai számításokhoz szükséges függvényeket. A main() fügvénnyben először is létrehozunk egy mátrixot, ami a lapok összeköttetését adja meg. Ha az érték 0 akkor a lap nincs összekötve az adott lappal és persze önmagával sincs. Ahol 1/2 vagy 1/3 az érték az azt jelzi, hogy az oldal hány oldallal van összekötve, például az 1/2: Az oldal 2 oldallal van összekötve és abbol az egyik kapcsolatot jelzi (az 1). 
        </para>
        <para>
        	A PR tömb fogja a PageRank értéket tárolni. A PRv tömb pedig a mátrixal való számításokhoz kell. A következő lépés egy végtelen ciklus.Ez majd a számítások végén a break parancsal megszakítjuk, ha a megadott feltétel teljesül. A for ciklusban van maga a PageRank számítása ami majd a tavolság függvényt is meghívja, ami egy részszámolást tartalmaz. A végtelen cikluson belül lévő ciklusok azért mennek 4-ig, mert 4 oldalt vizsgálunk. A ciklusból való kilépés a "break" parancsal történik, ha a tavolsag függvényben kapott eredmény kisebb mint 0.00000001. A végén a kiir függvény megkapja a PR értékeket és az oldalak számát és kiíratja azokat.
        </para>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>
	 <para>
            A tételt Viggo Brun bizonyította 1919-ben. Ezért is nevezték el róla. A tétel kimondja hogy az ikerprímek reciprok összege a Brun konstanthoz konvergál, ami egy véges érték. Ikerprímeknek nevezzük azokat a prím számokat, melyek különbségének abszolút értéke kettő. Például a 3 és 5 vagy a 11 és 13.
        </para>
        <para>
        Brun tétel R szimulációban:
        </para>
        <programlisting language="c"><![CDATA[
library(matlab)
stp <- function(x){
    primes = primes(x)
    diff = primes[2:length(primes)]-primes[1:length(primes)-1]
    idx = which(diff==2)
    t1primes = primes[idx]
    t2primes = primes[idx]+2
    rt1plust2 = 1/t1primes+1/t2primes
    return(sum(rt1plust2))
}
x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")
        ]]></programlisting>
	<para>
            A számoláshoz elősször is kell egy matlab könyvtár. A program fő része az stp függvény. Ez a függvény megkapja x-et. X egy határ szám lesz, ami megmondja meddig kell a prímeket megkeresni. Ehez a primes függvényt használjuk. A primes(x) kiírja x-ig az összes prímet. A diff vektorban eltároljuk a primes vektorban tárolt egymás melletti prímek különbségét. A számítást úgy végezzük, hogy a 2 prímtől indulva kivonjuk a prímből az előtte lévő prímet. Az idx el vizsgaljuk meg, hogy mely prímek különbsége 2 és ezek hol vannak (a helyüket a which függvény adja meg). a t1primes vektorban elhelyezzük ezeket a prímeket. A t2primes vektorba pedig ami ezeknél a prímeknél kettővel nagyobb (azaz ikerprímek). rt1plust2 vektorban végezzük a recikropképzést és a pár reciprokát összeadjuk. A returnban pedig a sum függvénnyel vissza adjuk ezek summázott összegét. Végezetül a plot függvénnyel lerajzoljuk grafikusan. 
        </para>
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
	<para>
	A Monty Hall-paradoxon egy valószínűségi paradoxon. A lényege, hogy 3 ajóból kell választani, kettő mögött nincs semmi és a haramdik mögött egy értékes nyeremény. Az egészet az bonyolítja, hogy az ajtó kiválasztása után, a müsörvezető kinyítja az egyik ajtót ami nem nyert és felajánlja a váltást. A kérdés az, hogy megéri-e változtatni. A józan paraszti ész azt mondja, hogy nem. Matematikailag azonban az jön ki, hogy igen megéri. Lássuk a programt, ami leszimulálja a döntéseket.
	</para>
        <programlisting language="c"><![CDATA[
kiserletek_szama=10000
kiserlet = sample(1:3, kiserletek_szama, replace=T)
jatekos = sample(1:3, kiserletek_szama, replace=T)
musorvezeto=vector(length = kiserletek_szama)
for (i in 1:kiserletek_szama) {
    if(kiserlet[i]==jatekos[i]){
    
        mibol=setdiff(c(1,2,3), kiserlet[i])
    
    }else{
    
        mibol=setdiff(c(1,2,3), c(kiserlet[i], jatekos[i]))
    
    }
    musorvezeto[i] = mibol[sample(1:length(mibol),1)]
}
nemvaltoztatesnyer= which(kiserlet==jatekos)
valtoztat=vector(length = kiserletek_szama)
for (i in 1:kiserletek_szama) {
    holvalt = setdiff(c(1,2,3), c(musorvezeto[i], jatekos[i]))
    valtoztat[i] = holvalt[sample(1:length(holvalt),1)]
    
}
valtoztatesnyer = which(kiserlet==valtoztat)
sprintf("Kiserletek szama: %i", kiserletek_szama)
length(nemvaltoztatesnyer)
length(valtoztatesnyer)
length(nemvaltoztatesnyer)/length(valtoztatesnyer)
length(nemvaltoztatesnyer)+length(valtoztatesnyer)
        ]]></programlisting>
        <para>
        	Most a kisérletet 10000-szer fogjuk szimulálni. A kiserlet vektorban az első és a harmadik "ajtó" közül választunk 10000-szer. A replace=T-vel tesszük lehetővé, hogy egy eredmény többször is kijöhessen. A játékos valasztásait a jatekos vektornál ugyan így meghatározzuk.A sample() fügvénnyel végezzük a kiválasztást. A musorvezeto vektort a length függvényel a kisérletek számával tesszük egyenlővé. Következik a for ciklus ami 1-től a kisérletek számáig fut (10000). A ciklusban egy feltétel vizsgálat következik. Az if-fel megvizsgáljuk, hogy a játékos álltal választott ajtó megegyezik e a kisérletben szereplő ajtóval. Ha a feltétel igaz egy mibol vektorba beletesszük azokat az ajtokat, amiket a játékos nem választott. Az else ágon, ha a feltétel nem igaz ,akkor azt az ajtót eltároljuk, amit nem választott és amelyik a nyereményt rejti. A musorvezeto vektorban pedig azt az ajtót amit ki fog nyitni. A nemvaltoztat és nyer vektorban azok az esetek vannak, amikor a jatékos azt az ajtót választotta elsőre, ami mögött az ajtó van és nem változtat a döntésén. A valtoztat vektorban pedig azt, mikor megváltozatja a döntését és így nyer. Ezt egy forciklussal vízsgáljuk. A legvégén kiíratjuk az eredményeket, hogy melyik esetben hányszor nyert.  

        </para>
    </section>

</chapter>                
