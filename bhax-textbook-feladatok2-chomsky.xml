<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

	<section>
        <title>Encoding</title>
        <para>Fordítsuk le és futtassuk a Javat tanítok könyv MandelbrotHalmazNagyító.java forrását úgy, hogy a
fájl nevekben és a forrásokban is meghagyjuk az ékezetes betűket!
</para>
	<para>
	Ahogy azt az utasításban is észrevehetük, a feladatunk csupán lefordítani és lefutatni, az elöző évről is ismert Mandelbrot halmazos feladat java kódját. Az érdekesség itt az, hogy a megszokottól eltérően, most ékeszetes betűket is használunk az osztály nevében. A kérdés, hogy mi fog történi? Lefút a program vagy esetleg kompilálási hibát fog dobni? Nézzük meg.
	</para>
	<mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="Chomsky2/mandel.png" format="PNG" scale="30"/>
        	</imageobject>
        </mediaobject>
	<para>
	Mint látható a program ékeszetes karakterek használatával is természetesen, hiba nélkül lefordul. Ez pedig azért van, mivel a JAVA nyelv minden UNICODE karaktert elfogad. Egy osztály vagy változó név adásakor csupán erre a pár szabályra kell figyeljünk: 1) nem kezdődhet számmal; 2) egyetlen egy karakter sor lehet (az az, ha azt a nevet szeretnék adni, hogy Az Első Osztályom, akkor ezt egyben kell írnunk AzElsőOsztályom); 3) nem használhatóak a fentartot karakter sorok, kulcs szók (ilyen karakter sor a for, while, if, else) úgyan is ezeknek más jelentésük van.
	</para>
	<para>
	A JAVA azért támogatja a teljes UNICODE karakter listát, mivel így minden programozo a saját anyanyelvén adhat nevet a programban szereplő osztályok és változók számára. 
	</para>
</section>

<section>
	<title>EPAM: Order of everything</title>
	<para>
	Collection-ok rendezése esetén jellemzően futási időben derül ki, ha olyan típusú objektumokat
próbálunk rendezni, amelyeken az összehasonlítás nem értelmezett (azaz T típus esetén nem
implementálják a Comparable&lt;T&gt; interface-t). Pl. ClassCastException a Collections.sort()
esetében, vagy ClassCastException a Stream.sorted() esetében. Írj olyan metódust, amely tetszőleges Collection esetén vissza adja az elemeket egy List-ben
növekvően rendezve, amennyiben az elemek összehasonlíthatóak velük azonos típusú
objektumokkal. Ha ez a feltétel nem teljesül, az eredményezzen syntax error-t. Például:
List&lt;Integer&gt; actualOutput = createOrderedList(input);
Ahol az input Collection&lt;Integer&gt; típusú. Természetesen más típusokkal is működnie
kell,
feltéve, hogy implementálják a Comparable interface-t.
	</para>
	<para>A feladatban az epam által megosztott kodról fogok beszélni.</para>
	<programlisting language="java"><![CDATA[
	public void testOrderShouldReturnExpectedListWhenCollectionIsPassed(Collection<Integer> input, List<Integer> expectedOutput) {
        // Given as parameters

        // When
        // createOrderedList(List.of(new OrderOfEverythingTest()));
        // ^ ez piros, az OrderOfEverythingTest nem implementálja a Comparable<OrderOfEverythingTest> -et
        List<Integer> actualOutput = createOrderedList(input);

        // Then
        assertThat(actualOutput, equalTo(expectedOutput));
    }
        	]]></programlisting>
	<para>Ahogy a nevében is látható, ez egy teszt függvény. Paraméterként a rendezett Collaction-t illetve a várt Collactiont kapta meg.</para>
<programlisting language="java"><![CDATA[
	private static Stream<Arguments> collectionsToSortDataProvider() {
        return Stream.of(
            Arguments.of(Collections.emptySet(), Collections.emptyList()),
            Arguments.of(Set.of(1), List.of(1)),
            Arguments.of(Set.of(2,1), List.of(1,2))
        );
    }
        	]]></programlisting>
	<para>A fent említett paraméterekre, itt láthatunk konkrét példákat, pontosabban hármat. Ezzek a paraméterek listák, melyek zéró, egy illetve két elemet tartalmaznak. A legelső programrész azt nézi meg, hogy a programunk helyesen rendezi-e azokat. Fontos tisztázni, hogy csak akkor lehet rendezni egy listát, ha azok homogének, az az nem tartalamznak több típust, hanem azonosokat.</para>
<programlisting language="java"><![CDATA[
	private <T extends Comparable<T>> List<T> createOrderedList(Collection<T> input) {
        return input.stream()
            .sorted()
            .collect(Collectors.toList());
    }
        	]]></programlisting>
<para>Ez a program réz rendezi a lista elemeit, majd egy Collactioné alakítja azokat.</para>
</section>
<section>
	<title>EPAM: Bináris keresés és Buborék rendezés implementálása</title>
	<para>Implementálj egy Java osztályt, amely képes egy előre definiált n darab Integer tárolására. Ennek az
osztálynak az alábbi funkcionalitásokkal kell rendelkeznie: Elem hozzáadása a tárolt elemekhez; Egy tetszőleges Integer értékről tudja eldönteni, hogy már tároljuk-e (ehhez egy bináris keresőt
implementálj); A tárolt elemeket az osztályunk be tudja rendezni és a rendezett (pl növekvő sorrend) struktúrával
vissza tud térni (ehhez egy buborék rendezőt implementálj)</para>
	<para>
	Ez a program már két fájlból áll, a main osztályból, illetve egy IntegerCollection.java fájlból. Kezdjük a mainnel.
	</para>
	<programlisting language="java"><![CDATA[
	public class Main {

	public static void main(String[] args) {
		IntegerCollection collection = new IntegerCollection(3);
		collection.add(0);
		collection.add(2);
		collection.add(1);
		System.out.println(collection);
		collection.sort();
		System.out.println(collection);
		System.out.println(collection.contains(0));
		System.out.println(collection.contains(1));
		System.out.println(collection.contains(2));
		System.out.println(collection.contains(3));
		System.out.println(collection.contains(4));
	}

}
        	]]></programlisting>
	<para>
	Mint látható a main fájlunk nem rendelkezik túl nagy terjedelemmel. Itt létrehozunk egy három elemet tartalmazó IntegerCollectiont, ehhez hozzáadunk három elemet (0-t,2-t,1-t), kiíratjuk, rendezük, újra kiíratjuk, majd megnézzük, hogy 0-tól 4-ig melyik elemek szerepelnek a Collectionben.
	</para>
	<programlisting language="java"><![CDATA[
	public class IntegerCollection {

	int[] array;
	int index = 0;
	int size;
	boolean sorted = true;

	public IntegerCollection(int size) {
		this.size = size;
		this.array = new int[size];
	}

	public IntegerCollection(int[] array) {
		this.size = array.length;
		this.index = this.size;
		this.array = array;
		this.sorted = false;
	}
        	]]></programlisting>
	<para>
	IntegerCollection.java fájlban létrehozzuk az IntegerCollection osztályt, melynek négy eleme van: egy vektor, amiben az elemek lesznek; index, amely azt mutatja hanyadik elemnél járunk; size, amely a vektor méretét definiálja; sorted, amely igaz, ha a vektor rendezet és hamis ha nem az. Ezek mellett láthatunk két konstruktort, melyek közül az elsőnél, csak a Collection méretét adjuk meg (mint a mainben) és a másodiknál pedig egy vektort tudunk átadni (itt a program el végzi a szükséges müveleteket, átveszi a vektort és a méretét).
	</para>
	<programlisting language="java"><![CDATA[
	public void add(int value) {
		if (size <= index) {
			throw new IllegalArgumentException("The collection is full");
		}
		sorted = false;
		array[index++] = value;
	}
        	]]></programlisting>
	<para>
	Az add az első fűggvény, amit létrehozunk. Ennek a feladata az új elem hozzáadása lesz. Mint látható a függvény leellenörzi, hogy tele van-e a listánk. Ha igen, akkor hibaüzenetet ad nekünk, ha nem akkor tovább lép, beteszi az elemet, a sorted hamis lesz (mivel nem tudjuk, hogy így rendezve maradt-e a listánk) és nőveli az indexet.
	</para>
	<programlisting language="java"><![CDATA[
	public boolean contains(int value) {
		if (!sorted) {
			sort();
		}

		int left = 0, right = size - 1;
		while (left <= right) {
			int mid = left + (right - left) / 2;

			if (array[mid] == value) {
				return true;
			}

			if (array[mid] < value) {
				left = mid + 1;
			} else {
				right = mid - 1;
			}
		}

		return false;
	}
        	]]></programlisting>
	<para>
	A contains függvény már egy picit nagyobb terjedelemmel rendelkezik. Ennek a feladata leellenörizni, hogy a paramáterként kapott érték (value) benne van-e a Collactionben. Az első lépés, amit tesz, hogy amennyiben nincsenek rendezve az elemek, rendezi őket. Ezt kővetően az ismert bináris keresést használja. Amenyiben megtalálja az elemet igaz értékel tér vissza, különben hamis értéket add.
	</para>
	<programlisting language="java"><![CDATA[
	public int[] sort() {
		for (int i = 0; i < size - 1; i++) {
			for (int j = 0; j < size - i - 1; j++) {
				if (array[j] > array[j + 1]) {
					int temp = array[j];
					array[j] = array[j + 1];
					array[j + 1] = temp;
				}
			}
		}
		sorted = true;
		return array;
	}
        	]]></programlisting>
	<para>
	A sort függvény, mint a neve is mondja rendezni fogja az elemeket. Ehhez a régen tanult buborék módszert használja.
	</para>
</section>
<section>
	<title>EPAM: Saját HashMap implementáció</title>
	<para>Írj egy saját java.util.Map implementációt, mely nem használja a Java Collection API-t.
Az implementáció meg kell feleljen az összes megadott unit tesztnek, nem kell tudjon kezelni null
értékű kulcsokat és a “keySet”, “values”, “entrySet” metódusok nem kell támogassák az elem
törlést.
Plusz feladatok:
1. az implementáció támogat null kulcsokat,
a “keySet”, “values”, “entrySet” metódusok támogatják az elem törlést.</para>
<programlisting language="java"><![CDATA[
	public class ArrayMap<K, V> implements Map<K, V> {

  private static final int INITIAL_SIZE = 16;
  private static final String NULL_KEY_NOT_SUPPORTED = "This Map implementation does not support null keys!";

  private int size = 0;
  private K[] keys = (K[]) new Object[INITIAL_SIZE];
  private V[] values = (V[]) new Object[INITIAL_SIZE];

  @Override
  public int size() {
    return size;
  }

  @Override
  public boolean isEmpty() {
    return size <= 0;
  }
        	]]></programlisting>
<para>
	A feladatban egy saját MAP-t fogunk létrehozni. Kezdés kép létrehozzunk pár statikus változót. Ezek azért lettek létrehozva, hogy átláthatóbb legyen a program, azok számára is, akik elsőnek látják. Ezt kővetően létrehozzuk a kulcs érték párosokat. Az első két metódus, amit átírunk a size és az isEmpty, melyek közül az első a méretet, a második pedig azt adja vissza, hogy üres-e.
	</para>
<programlisting language="java"><![CDATA[
	@Override
  public boolean containsKey(Object key) {
    Objects.requireNonNull(key, NULL_KEY_NOT_SUPPORTED);

    return searchItemInArray(key, keys, Object::equals) != -1;
  }

  @Override
  public boolean containsValue(Object value) {
    int valueIndex = searchItemInArray(value, values, Object::equals);
    return valueIndex > -1 && keys[valueIndex] != null;
  }
        	]]></programlisting>
<para>
	Ez a két felülírt metódus azt nézi meg, hogy szerepel-e a kulcs vagy az érték a listában.
	</para>
<programlisting language="java"><![CDATA[
	@Override
  public V get(Object key) {
    Objects.requireNonNull(key, NULL_KEY_NOT_SUPPORTED);
    if(size <= 0) {
      return null;
    }

    int keyIndex = searchItemInArray(key, keys, Object::equals);
    if (keyIndex > -1) {
      return values[keyIndex];
    }

    return null;
  }

  @Override
  public V put(K key, V value) {
    Objects.requireNonNull(key, NULL_KEY_NOT_SUPPORTED);

    int keyIndex = searchItemInArray(key, keys, Objects::equals);
    if (keyIndex < 0) {
      keyIndex = findFirstEmptyPlace();
      if (keyIndex < 0) {
        expandArrays();
      }
      keyIndex = size;
    }

    V prevValue = values[keyIndex];

    keys[keyIndex] = key;
    values[keyIndex] = value;
    size++;

    return prevValue;
  }
  private <I> int searchItemInArray(I item, I[] array, BiPredicate<I, I> equalFunction) {
    for (int index = 0; index < array.length; index++) {
      if (equalFunction.test(item, array[index]))
        return index;
    }

    return -1;
  }

  private int findFirstEmptyPlace() {
    return searchItemInArray(null, keys, Objects::equals);
  }

  private void expandArrays() {
    int expandedSize = size * 2;

    keys = Arrays.copyOf(keys, expandedSize);
    values = Arrays.copyOf(values, expandedSize);
  }

}
        	]]></programlisting>
<para>
	A get szintén megkeresi az elemet a listában. A put beleteszi, de elsőnek megnézi, hogy biztos nincs-e benne, ezt kővetően meg keresi az első üres helyt, ahova beteheti. Ezzek a metódusok, használnak pár a program végén megírt függvényt. Ezzek a  searchItamInArray, findFirstEmptyPlace, expandArays.
	</para>
<programlisting language="java"><![CDATA[
@Override
  public void putAll(Map<? extends K, ? extends V> m) {
    m.forEach(this::put);
  }

  @Override
  public void clear() {
    Arrays.fill(keys, null);
    Arrays.fill(values, null);
    size = 0;
  }

  @Override
  public Set<K> keySet() {
    Set<K> result = new HashSet<>();
    for(K i : keys) {
      if (i != null) {
        result.add(i);
      }
    }

    return result;
  }

  @Override
  public Collection<V> values() {
    Collection<V> result = new ArrayList<>();
    for(V i : values) {
      if (i != null) {
        result.add(i);
      }
    }

    return result;
  }

  @Override
  public Set<Entry<K, V>> entrySet() {
    Set<Entry<K, V>> result = new HashSet<>();
    for(int i = 0; i < keys.length; ++i) {
      K key = keys[i];
      if (key != null) {
          V value = values[i];
          result.add(new AbstractMap.SimpleEntry<>(key, value));
      }
    }

    return result;
  }
        	]]></programlisting>
<para>
	A putAll egy teljes Collactiont illeszt be a clear ennek az elentéte, a teljes listát törli. A keyset és values pedig vissza adja az összes kulcsot és értéket.
	</para>
</section>
</chapter>
